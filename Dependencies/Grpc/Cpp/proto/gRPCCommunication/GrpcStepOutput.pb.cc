// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/gRPCCommunication/GrpcStepOutput.proto

#include "proto/gRPCCommunication/GrpcStepOutput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgRPCCommunication_2fGrpcProtoType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrpcProtoType_proto_2fgRPCCommunication_2fGrpcProtoType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto;
namespace gRPCCommunication {
class GrpcStepOutput_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrpcStepOutput_InfoEntry_DoNotUse> _instance;
} _GrpcStepOutput_InfoEntry_DoNotUse_default_instance_;
class GrpcStepOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GrpcStepOutput> _instance;
} _GrpcStepOutput_default_instance_;
}  // namespace gRPCCommunication
static void InitDefaultsscc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gRPCCommunication::_GrpcStepOutput_default_instance_;
    new (ptr) ::gRPCCommunication::GrpcStepOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gRPCCommunication::GrpcStepOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto}, {
      &scc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto.base,
      &scc_info_GrpcProtoType_proto_2fgRPCCommunication_2fGrpcProtoType_2eproto.base,}};

static void InitDefaultsscc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gRPCCommunication::_GrpcStepOutput_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse();
  }
  ::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, stringobervations_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, floatobervations_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, intobervations_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, reward_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, done_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, info_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, obervationtype_),
  PROTOBUF_FIELD_OFFSET(::gRPCCommunication::GrpcStepOutput, infotype_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse)},
  { 9, -1, sizeof(::gRPCCommunication::GrpcStepOutput)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gRPCCommunication::_GrpcStepOutput_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gRPCCommunication::_GrpcStepOutput_default_instance_),
};

const char descriptor_table_protodef_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto[] =
  "\n,proto/gRPCCommunication/GrpcStepOutput"
  ".proto\022\021gRPCCommunication\032+proto/gRPCCom"
  "munication/GrpcProtoType.proto\"\321\002\n\016GrpcS"
  "tepOutput\022\031\n\021stringObervations\030\001 \001(\t\022\030\n\020"
  "floatObervations\030\002 \003(\002\022\026\n\016intObervations"
  "\030\003 \003(\005\022\016\n\006reward\030\004 \001(\002\022\014\n\004done\030\005 \001(\010\0229\n\004"
  "info\030\006 \003(\0132+.gRPCCommunication.GrpcStepO"
  "utput.InfoEntry\0228\n\016obervationType\030\007 \003(\0132"
  " .gRPCCommunication.GrpcProtoType\0222\n\010inf"
  "oType\030\010 \003(\0132 .gRPCCommunication.GrpcProt"
  "oType\032+\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\014:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_deps[1] = {
  &::descriptor_table_proto_2fgRPCCommunication_2fGrpcProtoType_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_sccs[2] = {
  &scc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto.base,
  &scc_info_GrpcStepOutput_InfoEntry_DoNotUse_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_once;
static bool descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto = {
  &descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_initialized, descriptor_table_protodef_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto, "proto/gRPCCommunication/GrpcStepOutput.proto", 458,
  &descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_once, descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_sccs, descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto::offsets,
  file_level_metadata_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto, 2, file_level_enum_descriptors_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto, file_level_service_descriptors_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto), true);
namespace gRPCCommunication {

// ===================================================================

GrpcStepOutput_InfoEntry_DoNotUse::GrpcStepOutput_InfoEntry_DoNotUse() {}
GrpcStepOutput_InfoEntry_DoNotUse::GrpcStepOutput_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GrpcStepOutput_InfoEntry_DoNotUse::MergeFrom(const GrpcStepOutput_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GrpcStepOutput_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GrpcStepOutput_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GrpcStepOutput::InitAsDefaultInstance() {
}
class GrpcStepOutput::HasBitSetters {
 public:
};

void GrpcStepOutput::clear_obervationtype() {
  obervationtype_.Clear();
}
void GrpcStepOutput::clear_infotype() {
  infotype_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GrpcStepOutput::kStringObervationsFieldNumber;
const int GrpcStepOutput::kFloatObervationsFieldNumber;
const int GrpcStepOutput::kIntObervationsFieldNumber;
const int GrpcStepOutput::kRewardFieldNumber;
const int GrpcStepOutput::kDoneFieldNumber;
const int GrpcStepOutput::kInfoFieldNumber;
const int GrpcStepOutput::kObervationTypeFieldNumber;
const int GrpcStepOutput::kInfoTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GrpcStepOutput::GrpcStepOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gRPCCommunication.GrpcStepOutput)
}
GrpcStepOutput::GrpcStepOutput(const GrpcStepOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      floatobervations_(from.floatobervations_),
      intobervations_(from.intobervations_),
      obervationtype_(from.obervationtype_),
      infotype_(from.infotype_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  stringobervations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.stringobervations().size() > 0) {
    stringobervations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stringobervations_);
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&done_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(done_));
  // @@protoc_insertion_point(copy_constructor:gRPCCommunication.GrpcStepOutput)
}

void GrpcStepOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto.base);
  stringobervations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(done_));
}

GrpcStepOutput::~GrpcStepOutput() {
  // @@protoc_insertion_point(destructor:gRPCCommunication.GrpcStepOutput)
  SharedDtor();
}

void GrpcStepOutput::SharedDtor() {
  stringobervations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GrpcStepOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GrpcStepOutput& GrpcStepOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GrpcStepOutput_proto_2fgRPCCommunication_2fGrpcStepOutput_2eproto.base);
  return *internal_default_instance();
}


void GrpcStepOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCCommunication.GrpcStepOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  floatobervations_.Clear();
  intobervations_.Clear();
  info_.Clear();
  obervationtype_.Clear();
  infotype_.Clear();
  stringobervations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&done_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(done_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GrpcStepOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string stringObervations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_stringobervations(), ptr, ctx, "gRPCCommunication.GrpcStepOutput.stringObervations");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floatObervations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_floatobervations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_floatobervations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 intObervations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_intobervations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_intobervations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool done = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .gRPCCommunication.GrpcProtoType obervationType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obervationtype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .gRPCCommunication.GrpcProtoType infoType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_infotype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GrpcStepOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:gRPCCommunication.GrpcStepOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stringObervations = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stringobervations()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->stringobervations().data(), static_cast<int>(this->stringobervations().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "gRPCCommunication.GrpcStepOutput.stringObervations"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float floatObervations = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floatobervations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_floatobervations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 intObervations = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_intobervations())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_intobervations())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reward = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool done = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> info = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          GrpcStepOutput_InfoEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GrpcStepOutput_InfoEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&info_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "gRPCCommunication.GrpcStepOutput.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gRPCCommunication.GrpcProtoType obervationType = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obervationtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gRPCCommunication.GrpcProtoType infoType = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_infotype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gRPCCommunication.GrpcStepOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gRPCCommunication.GrpcStepOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GrpcStepOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gRPCCommunication.GrpcStepOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stringObervations = 1;
  if (this->stringobervations().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stringobervations().data(), static_cast<int>(this->stringobervations().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gRPCCommunication.GrpcStepOutput.stringObervations");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stringobervations(), output);
  }

  // repeated float floatObervations = 2;
  if (this->floatobervations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_floatobervations_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->floatobervations().data(), this->floatobervations_size(), output);
  }

  // repeated int32 intObervations = 3;
  if (this->intobervations_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_intobervations_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->intobervations_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->intobervations(i), output);
  }

  // float reward = 4;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->reward(), output);
  }

  // bool done = 5;
  if (this->done() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->done(), output);
  }

  // map<string, bytes> info = 6;
  if (!this->info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gRPCCommunication.GrpcStepOutput.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GrpcStepOutput_InfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(6, entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        GrpcStepOutput_InfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(6, entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .gRPCCommunication.GrpcProtoType obervationType = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obervationtype_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->obervationtype(static_cast<int>(i)),
      output);
  }

  // repeated .gRPCCommunication.GrpcProtoType infoType = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infotype_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->infotype(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gRPCCommunication.GrpcStepOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* GrpcStepOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCCommunication.GrpcStepOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stringObervations = 1;
  if (this->stringobervations().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stringobervations().data(), static_cast<int>(this->stringobervations().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gRPCCommunication.GrpcStepOutput.stringObervations");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->stringobervations(), target);
  }

  // repeated float floatObervations = 2;
  if (this->floatobervations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _floatobervations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->floatobervations_, target);
  }

  // repeated int32 intObervations = 3;
  if (this->intobervations_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _intobervations_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->intobervations_, target);
  }

  // float reward = 4;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->reward(), target);
  }

  // bool done = 5;
  if (this->done() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->done(), target);
  }

  // map<string, bytes> info = 6;
  if (!this->info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "gRPCCommunication.GrpcStepOutput.InfoEntry.key");
      }
    };

    if (false &&
        this->info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GrpcStepOutput_InfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(6, entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        GrpcStepOutput_InfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(6, entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .gRPCCommunication.GrpcProtoType obervationType = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obervationtype_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->obervationtype(static_cast<int>(i)), target);
  }

  // repeated .gRPCCommunication.GrpcProtoType infoType = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infotype_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->infotype(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCCommunication.GrpcStepOutput)
  return target;
}

size_t GrpcStepOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCCommunication.GrpcStepOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floatObervations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->floatobervations_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _floatobervations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 intObervations = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intobervations_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _intobervations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, bytes> info = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->info().begin();
      it != this->info().end(); ++it) {
    GrpcStepOutput_InfoEntry_DoNotUse::MapEntryWrapper entry(nullptr, it->first, it->second);
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        MessageSizeNoVirtual(entry);
  }

  // repeated .gRPCCommunication.GrpcProtoType obervationType = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->obervationtype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obervationtype(static_cast<int>(i)));
    }
  }

  // repeated .gRPCCommunication.GrpcProtoType infoType = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->infotype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->infotype(static_cast<int>(i)));
    }
  }

  // string stringObervations = 1;
  if (this->stringobervations().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->stringobervations());
  }

  // float reward = 4;
  if (!(this->reward() <= 0 && this->reward() >= 0)) {
    total_size += 1 + 4;
  }

  // bool done = 5;
  if (this->done() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GrpcStepOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gRPCCommunication.GrpcStepOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const GrpcStepOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GrpcStepOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gRPCCommunication.GrpcStepOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gRPCCommunication.GrpcStepOutput)
    MergeFrom(*source);
  }
}

void GrpcStepOutput::MergeFrom(const GrpcStepOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gRPCCommunication.GrpcStepOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  floatobervations_.MergeFrom(from.floatobervations_);
  intobervations_.MergeFrom(from.intobervations_);
  info_.MergeFrom(from.info_);
  obervationtype_.MergeFrom(from.obervationtype_);
  infotype_.MergeFrom(from.infotype_);
  if (from.stringobervations().size() > 0) {

    stringobervations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stringobervations_);
  }
  if (!(from.reward() <= 0 && from.reward() >= 0)) {
    set_reward(from.reward());
  }
  if (from.done() != 0) {
    set_done(from.done());
  }
}

void GrpcStepOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gRPCCommunication.GrpcStepOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrpcStepOutput::CopyFrom(const GrpcStepOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCCommunication.GrpcStepOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrpcStepOutput::IsInitialized() const {
  return true;
}

void GrpcStepOutput::Swap(GrpcStepOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GrpcStepOutput::InternalSwap(GrpcStepOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  floatobervations_.InternalSwap(&other->floatobervations_);
  intobervations_.InternalSwap(&other->intobervations_);
  info_.Swap(&other->info_);
  CastToBase(&obervationtype_)->InternalSwap(CastToBase(&other->obervationtype_));
  CastToBase(&infotype_)->InternalSwap(CastToBase(&other->infotype_));
  stringobervations_.Swap(&other->stringobervations_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reward_, other->reward_);
  swap(done_, other->done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GrpcStepOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gRPCCommunication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::gRPCCommunication::GrpcStepOutput_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCCommunication::GrpcStepOutput* Arena::CreateMaybeMessage< ::gRPCCommunication::GrpcStepOutput >(Arena* arena) {
  return Arena::CreateInternal< ::gRPCCommunication::GrpcStepOutput >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
